// app/keranjang/page.js (Full Cart Page - diperbaiki agar konsisten dengan summary)
'use client'
import { useState } from 'react'
import Footer from '../components/footer'

// Asumsikan cart state dari context atau local, tapi untuk demo, gunakan dummy data
export default function CartPage() {
  const [cart, setCart] = useState([
    // Dummy data untuk demo
    { id: 1, name: 'Palm Sugar Milk Coffee', price: 'Rp18.000', quantity: 2 },
    { id: 2, name: 'Taro', price: 'Rp15.000', quantity: 1 }
  ])

  const parsePrice = (priceStr) => {
    return parseInt(priceStr.replace('Rp', '').replace('.', ''), 10)
  }

  const totalPrice = cart.reduce((sum, cartItem) => sum + (parsePrice(cartItem.price) * cartItem.quantity), 0)
  const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0)

  const addToCart = (item) => {
    setCart(prevCart => {
      const existingItem = prevCart.find(cartItem => cartItem.id === item.id)
      if (existingItem) {
        return prevCart.map(cartItem =>
          cartItem.id === item.id ? { ...cartItem, quantity: cartItem.quantity + 1 } : cartItem
        )
      }
      return [...prevCart, { ...item, quantity: 1 }]
    })
  }

  const removeFromCart = (id) => {
    setCart(prevCart => {
      const existingItem = prevCart.find(cartItem => cartItem.id === id)
      if (existingItem && existingItem.quantity > 1) {
        return prevCart.map(cartItem =>
          cartItem.id === id ? { ...cartItem, quantity: cartItem.quantity - 1 } : cartItem
        )
      }
      return prevCart.filter(cartItem => cartItem.id !== id)
    })
  }

  const clearCart = () => {
    setCart([])
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-red-50 relative pb-32">
      {/* Header */}
      <div className="bg-white/80 backdrop-blur-lg border-b border-orange-100 sticky top-0 z-10">
        <div className="px-4 py-4">
          <h1 className="text-2xl font-bold text-gray-800 text-center">Keranjang Belanja</h1>
        </div>
      </div>

      {cart.length === 0 ? (
        <div className="flex flex-col items-center justify-center h-[60vh]">
          <svg className="w-24 h-24 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
          </svg>
          <p className="text-gray-600 text-lg font-medium">Keranjang Anda kosong</p>
          <button 
            onClick={() => window.history.back()}
            className="mt-4 text-orange-600 font-semibold"
          >
            Kembali ke Menu
          </button>
        </div>
      ) : (
        <div className="px-4 pt-6">
          <div className="space-y-4">
            {cart.map((cartItem) => (
              <div key={cartItem.id} className="bg-white/90 rounded-2xl p-4 shadow-md">
                <div className="flex justify-between items-center">
                  <div className="flex-1">
                    <span className="text-sm font-medium text-gray-800 block">
                      {cartItem.name}
                    </span>
                    <span className="text-xs text-gray-500">
                      {cartItem.price} x {cartItem.quantity}
                    </span>
                  </div>
                  <div className="flex items-center gap-3">
                    <button 
                      onClick={() => removeFromCart(cartItem.id)}
                      className="w-8 h-8 bg-red-100 text-red-600 rounded-lg flex items-center justify-center hover:bg-red-200"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 12H4" />
                      </svg>
                    </button>
                    <span className="text-sm font-bold text-orange-600 min-w-[70px] text-center">
                      Rp{(parsePrice(cartItem.price) * cartItem.quantity).toLocaleString()}
                    </span>
                    <button 
                      onClick={() => addToCart(cartItem)}
                      className="w-8 h-8 bg-orange-100 text-orange-600 rounded-lg flex items-center justify-center hover:bg-orange-200"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Total */}
          <div className="fixed bottom-24 left-0 right-0 bg-white/95 backdrop-blur-lg border-t border-orange-100 p-4 z-20">
            <div className="max-w-[380px] mx-auto flex justify-between items-center">
              <div>
                <span className="text-sm text-gray-600">Total ({totalItems} items)</span>
                <span className="text-xl font-bold text-orange-600 block">
                  Rp{totalPrice.toLocaleString()}
                </span>
              </div>
              <button className="bg-gradient-to-r from-orange-400 to-red-400 text-white font-bold py-3 px-8 rounded-2xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200">
                Checkout
              </button>
            </div>
          </div>
        </div>
      )}

      <Footer activeTab="menu" leftMargin={16} rightMargin={16} />
    </div>
  )
}